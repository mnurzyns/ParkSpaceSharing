/* tslint:disable */
/* eslint-disable */
/**
 * Parking space sharing
 * Project created by trainees of Bakcyl Programowania in 2022/2023.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AuthDto
 */
export interface AuthDto {
    /**
     * 
     * @type {string}
     * @memberof AuthDto
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthDto
     */
    'tokenType'?: string;
}
/**
 * 
 * @export
 * @interface OfferDto
 */
export interface OfferDto {
    /**
     * 
     * @type {number}
     * @memberof OfferDto
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof OfferDto
     */
    'place_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof OfferDto
     */
    'date_from'?: number;
    /**
     * 
     * @type {number}
     * @memberof OfferDto
     */
    'date_to'?: number;
    /**
     * 
     * @type {string}
     * @memberof OfferDto
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof OfferDto
     */
    'price'?: number;
}
/**
 * 
 * @export
 * @interface OfferPageDto
 */
export interface OfferPageDto {
    /**
     * 
     * @type {number}
     * @memberof OfferPageDto
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof OfferPageDto
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof OfferPageDto
     */
    'count'?: number;
    /**
     * 
     * @type {Array<OfferDto>}
     * @memberof OfferPageDto
     */
    'items'?: Array<OfferDto>;
}
/**
 * 
 * @export
 * @interface PlaceDto
 */
export interface PlaceDto {
    /**
     * 
     * @type {number}
     * @memberof PlaceDto
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PlaceDto
     */
    'owner_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PlaceDto
     */
    'address'?: string;
    /**
     * 
     * @type {number}
     * @memberof PlaceDto
     */
    'latitude'?: number;
    /**
     * 
     * @type {number}
     * @memberof PlaceDto
     */
    'longitude'?: number;
}
/**
 * 
 * @export
 * @interface PlacePageDto
 */
export interface PlacePageDto {
    /**
     * 
     * @type {number}
     * @memberof PlacePageDto
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof PlacePageDto
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof PlacePageDto
     */
    'count'?: number;
    /**
     * 
     * @type {Array<PlaceDto>}
     * @memberof PlacePageDto
     */
    'items'?: Array<PlaceDto>;
}
/**
 * 
 * @export
 * @interface SignInDto
 */
export interface SignInDto {
    /**
     * 
     * @type {string}
     * @memberof SignInDto
     */
    'login'?: string;
    /**
     * 
     * @type {string}
     * @memberof SignInDto
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface SignUpDto
 */
export interface SignUpDto {
    /**
     * 
     * @type {string}
     * @memberof SignUpDto
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof SignUpDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof SignUpDto
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface StatusDto
 */
export interface StatusDto {
    /**
     * Short status text
     * @type {string}
     * @memberof StatusDto
     */
    'status'?: string;
    /**
     * Status code
     * @type {number}
     * @memberof StatusDto
     */
    'code'?: number;
    /**
     * Verbose message
     * @type {string}
     * @memberof StatusDto
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {number}
     * @memberof UserDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'password'?: string;
    /**
     * 
     * @type {number}
     * @memberof UserDto
     */
    'role'?: number;
}
/**
 * 
 * @export
 * @interface UserPageDto
 */
export interface UserPageDto {
    /**
     * 
     * @type {number}
     * @memberof UserPageDto
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserPageDto
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserPageDto
     */
    'count'?: number;
    /**
     * 
     * @type {Array<UserDto>}
     * @memberof UserPageDto
     */
    'items'?: Array<UserDto>;
}

/**
 * AuthControllerApi - axios parameter creator
 * @export
 */
export const AuthControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Sign in
         * @param {SignInDto} signInDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signIn: async (signInDto: SignInDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signInDto' is not null or undefined
            assertParamExists('signIn', 'signInDto', signInDto)
            const localVarPath = `/signin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signInDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sign up
         * @param {SignUpDto} signUpDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUp: async (signUpDto: SignUpDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signUpDto' is not null or undefined
            assertParamExists('signUp', 'signUpDto', signUpDto)
            const localVarPath = `/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signUpDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthControllerApi - functional programming interface
 * @export
 */
export const AuthControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Sign in
         * @param {SignInDto} signInDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signIn(signInDto: SignInDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signIn(signInDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sign up
         * @param {SignUpDto} signUpDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signUp(signUpDto: SignUpDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signUp(signUpDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthControllerApi - factory interface
 * @export
 */
export const AuthControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Sign in
         * @param {SignInDto} signInDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signIn(signInDto: SignInDto, options?: any): AxiosPromise<AuthDto> {
            return localVarFp.signIn(signInDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sign up
         * @param {SignUpDto} signUpDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUp(signUpDto: SignUpDto, options?: any): AxiosPromise<AuthDto> {
            return localVarFp.signUp(signUpDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthControllerApi - object-oriented interface
 * @export
 * @class AuthControllerApi
 * @extends {BaseAPI}
 */
export class AuthControllerApi extends BaseAPI {
    /**
     * 
     * @summary Sign in
     * @param {SignInDto} signInDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public signIn(signInDto: SignInDto, options?: AxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).signIn(signInDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sign up
     * @param {SignUpDto} signUpDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public signUp(signUpDto: SignUpDto, options?: AxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).signUp(signUpDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OfferControllerApi - axios parameter creator
 * @export
 */
export const OfferControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create one offer
         * @param {OfferDto} offerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOne: async (offerDto: OfferDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'offerDto' is not null or undefined
            assertParamExists('createOne', 'offerDto', offerDto)
            const localVarPath = `/offer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT Bearer Auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(offerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete one offer
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOne: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteOne', 'id', id)
            const localVarPath = `/offer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT Bearer Auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get one offer
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOne: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOne', 'id', id)
            const localVarPath = `/offer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update one offer
         * @param {number} id 
         * @param {OfferDto} offerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOne: async (id: number, offerDto: OfferDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchOne', 'id', id)
            // verify required parameter 'offerDto' is not null or undefined
            assertParamExists('patchOne', 'offerDto', offerDto)
            const localVarPath = `/offer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT Bearer Auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(offerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Put one offer
         * @param {OfferDto} offerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putOne: async (offerDto: OfferDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'offerDto' is not null or undefined
            assertParamExists('putOne', 'offerDto', offerDto)
            const localVarPath = `/offer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT Bearer Auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(offerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search offers
         * @param {string} [query] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search: async (query?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/offer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OfferControllerApi - functional programming interface
 * @export
 */
export const OfferControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OfferControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create one offer
         * @param {OfferDto} offerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOne(offerDto: OfferDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfferDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOne(offerDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete one offer
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOne(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get one offer
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOne(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfferDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update one offer
         * @param {number} id 
         * @param {OfferDto} offerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchOne(id: number, offerDto: OfferDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfferDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchOne(id, offerDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Put one offer
         * @param {OfferDto} offerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putOne(offerDto: OfferDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfferDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putOne(offerDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search offers
         * @param {string} [query] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async search(query?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfferPageDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.search(query, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OfferControllerApi - factory interface
 * @export
 */
export const OfferControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OfferControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Create one offer
         * @param {OfferDto} offerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOne(offerDto: OfferDto, options?: any): AxiosPromise<OfferDto> {
            return localVarFp.createOne(offerDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete one offer
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOne(id: number, options?: any): AxiosPromise<StatusDto> {
            return localVarFp.deleteOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get one offer
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOne(id: number, options?: any): AxiosPromise<OfferDto> {
            return localVarFp.getOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update one offer
         * @param {number} id 
         * @param {OfferDto} offerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOne(id: number, offerDto: OfferDto, options?: any): AxiosPromise<OfferDto> {
            return localVarFp.patchOne(id, offerDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Put one offer
         * @param {OfferDto} offerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putOne(offerDto: OfferDto, options?: any): AxiosPromise<OfferDto> {
            return localVarFp.putOne(offerDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search offers
         * @param {string} [query] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search(query?: string, limit?: number, offset?: number, options?: any): AxiosPromise<OfferPageDto> {
            return localVarFp.search(query, limit, offset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OfferControllerApi - object-oriented interface
 * @export
 * @class OfferControllerApi
 * @extends {BaseAPI}
 */
export class OfferControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create one offer
     * @param {OfferDto} offerDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferControllerApi
     */
    public createOne(offerDto: OfferDto, options?: AxiosRequestConfig) {
        return OfferControllerApiFp(this.configuration).createOne(offerDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete one offer
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferControllerApi
     */
    public deleteOne(id: number, options?: AxiosRequestConfig) {
        return OfferControllerApiFp(this.configuration).deleteOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get one offer
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferControllerApi
     */
    public getOne(id: number, options?: AxiosRequestConfig) {
        return OfferControllerApiFp(this.configuration).getOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update one offer
     * @param {number} id 
     * @param {OfferDto} offerDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferControllerApi
     */
    public patchOne(id: number, offerDto: OfferDto, options?: AxiosRequestConfig) {
        return OfferControllerApiFp(this.configuration).patchOne(id, offerDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Put one offer
     * @param {OfferDto} offerDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferControllerApi
     */
    public putOne(offerDto: OfferDto, options?: AxiosRequestConfig) {
        return OfferControllerApiFp(this.configuration).putOne(offerDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search offers
     * @param {string} [query] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferControllerApi
     */
    public search(query?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return OfferControllerApiFp(this.configuration).search(query, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PlaceControllerApi - axios parameter creator
 * @export
 */
export const PlaceControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create one place
         * @param {PlaceDto} placeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOne: async (placeDto: PlaceDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'placeDto' is not null or undefined
            assertParamExists('createOne', 'placeDto', placeDto)
            const localVarPath = `/place`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT Bearer Auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(placeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete one place
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOne: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteOne', 'id', id)
            const localVarPath = `/place/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT Bearer Auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get one place
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOne: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOne', 'id', id)
            const localVarPath = `/place/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update one place
         * @param {number} id 
         * @param {PlaceDto} placeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOne: async (id: number, placeDto: PlaceDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchOne', 'id', id)
            // verify required parameter 'placeDto' is not null or undefined
            assertParamExists('patchOne', 'placeDto', placeDto)
            const localVarPath = `/place/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT Bearer Auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(placeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Put one place
         * @param {PlaceDto} placeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putOne: async (placeDto: PlaceDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'placeDto' is not null or undefined
            assertParamExists('putOne', 'placeDto', placeDto)
            const localVarPath = `/place`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT Bearer Auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(placeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search places
         * @param {string} [query] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search: async (query?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/place`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlaceControllerApi - functional programming interface
 * @export
 */
export const PlaceControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlaceControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create one place
         * @param {PlaceDto} placeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOne(placeDto: PlaceDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlaceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOne(placeDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete one place
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOne(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get one place
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOne(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlaceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update one place
         * @param {number} id 
         * @param {PlaceDto} placeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchOne(id: number, placeDto: PlaceDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlaceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchOne(id, placeDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Put one place
         * @param {PlaceDto} placeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putOne(placeDto: PlaceDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlaceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putOne(placeDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search places
         * @param {string} [query] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async search(query?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlacePageDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.search(query, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PlaceControllerApi - factory interface
 * @export
 */
export const PlaceControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlaceControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Create one place
         * @param {PlaceDto} placeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOne(placeDto: PlaceDto, options?: any): AxiosPromise<PlaceDto> {
            return localVarFp.createOne(placeDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete one place
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOne(id: number, options?: any): AxiosPromise<StatusDto> {
            return localVarFp.deleteOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get one place
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOne(id: number, options?: any): AxiosPromise<PlaceDto> {
            return localVarFp.getOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update one place
         * @param {number} id 
         * @param {PlaceDto} placeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOne(id: number, placeDto: PlaceDto, options?: any): AxiosPromise<PlaceDto> {
            return localVarFp.patchOne(id, placeDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Put one place
         * @param {PlaceDto} placeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putOne(placeDto: PlaceDto, options?: any): AxiosPromise<PlaceDto> {
            return localVarFp.putOne(placeDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search places
         * @param {string} [query] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search(query?: string, limit?: number, offset?: number, options?: any): AxiosPromise<PlacePageDto> {
            return localVarFp.search(query, limit, offset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlaceControllerApi - object-oriented interface
 * @export
 * @class PlaceControllerApi
 * @extends {BaseAPI}
 */
export class PlaceControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create one place
     * @param {PlaceDto} placeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaceControllerApi
     */
    public createOne(placeDto: PlaceDto, options?: AxiosRequestConfig) {
        return PlaceControllerApiFp(this.configuration).createOne(placeDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete one place
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaceControllerApi
     */
    public deleteOne(id: number, options?: AxiosRequestConfig) {
        return PlaceControllerApiFp(this.configuration).deleteOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get one place
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaceControllerApi
     */
    public getOne(id: number, options?: AxiosRequestConfig) {
        return PlaceControllerApiFp(this.configuration).getOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update one place
     * @param {number} id 
     * @param {PlaceDto} placeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaceControllerApi
     */
    public patchOne(id: number, placeDto: PlaceDto, options?: AxiosRequestConfig) {
        return PlaceControllerApiFp(this.configuration).patchOne(id, placeDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Put one place
     * @param {PlaceDto} placeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaceControllerApi
     */
    public putOne(placeDto: PlaceDto, options?: AxiosRequestConfig) {
        return PlaceControllerApiFp(this.configuration).putOne(placeDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search places
     * @param {string} [query] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaceControllerApi
     */
    public search(query?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return PlaceControllerApiFp(this.configuration).search(query, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserControllerApi - axios parameter creator
 * @export
 */
export const UserControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create one user
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOne: async (userDto: UserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userDto' is not null or undefined
            assertParamExists('createOne', 'userDto', userDto)
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT Bearer Auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete one user
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOne: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteOne', 'id', id)
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT Bearer Auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get one user
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOne: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOne', 'id', id)
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update one user
         * @param {number} id 
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOne: async (id: number, userDto: UserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchOne', 'id', id)
            // verify required parameter 'userDto' is not null or undefined
            assertParamExists('patchOne', 'userDto', userDto)
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT Bearer Auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Put one user
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putOne: async (userDto: UserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userDto' is not null or undefined
            assertParamExists('putOne', 'userDto', userDto)
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT Bearer Auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search users
         * @param {string} [query] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search: async (query?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserControllerApi - functional programming interface
 * @export
 */
export const UserControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create one user
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOne(userDto: UserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOne(userDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete one user
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOne(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get one user
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOne(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update one user
         * @param {number} id 
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchOne(id: number, userDto: UserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchOne(id, userDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Put one user
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putOne(userDto: UserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putOne(userDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search users
         * @param {string} [query] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async search(query?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPageDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.search(query, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserControllerApi - factory interface
 * @export
 */
export const UserControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Create one user
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOne(userDto: UserDto, options?: any): AxiosPromise<UserDto> {
            return localVarFp.createOne(userDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete one user
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOne(id: number, options?: any): AxiosPromise<StatusDto> {
            return localVarFp.deleteOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get one user
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOne(id: number, options?: any): AxiosPromise<UserDto> {
            return localVarFp.getOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update one user
         * @param {number} id 
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOne(id: number, userDto: UserDto, options?: any): AxiosPromise<UserDto> {
            return localVarFp.patchOne(id, userDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Put one user
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putOne(userDto: UserDto, options?: any): AxiosPromise<UserDto> {
            return localVarFp.putOne(userDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search users
         * @param {string} [query] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search(query?: string, limit?: number, offset?: number, options?: any): AxiosPromise<UserPageDto> {
            return localVarFp.search(query, limit, offset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserControllerApi - object-oriented interface
 * @export
 * @class UserControllerApi
 * @extends {BaseAPI}
 */
export class UserControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create one user
     * @param {UserDto} userDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public createOne(userDto: UserDto, options?: AxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).createOne(userDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete one user
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public deleteOne(id: number, options?: AxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).deleteOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get one user
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getOne(id: number, options?: AxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).getOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update one user
     * @param {number} id 
     * @param {UserDto} userDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public patchOne(id: number, userDto: UserDto, options?: AxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).patchOne(id, userDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Put one user
     * @param {UserDto} userDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public putOne(userDto: UserDto, options?: AxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).putOne(userDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search users
     * @param {string} [query] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public search(query?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).search(query, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
}


