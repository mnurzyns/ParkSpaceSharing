/* tslint:disable */
/* eslint-disable */
/**
 * Parking space sharing
 * Project created by trainees of Bakcyl Programowania in 2022/2023.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AuthDto
 */
export interface AuthDto {
    /**
     * 
     * @type {string}
     * @memberof AuthDto
     */
    'token'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AuthDto
     */
    'admin'?: boolean;
}
/**
 * 
 * @export
 * @interface OfferDto
 */
export interface OfferDto {
    /**
     * pole with server use to sent and client read
     * @type {number}
     * @memberof OfferDto
     */
    'id'?: number;
    /**
     * pole with client use to sent and server read
     * @type {number}
     * @memberof OfferDto
     */
    'parking_space_id'?: number;
    /**
     * pole with client and server use to sent and read
     * @type {string}
     * @memberof OfferDto
     */
    'description'?: string;
    /**
     * pole with server use to sent and client read
     * @type {string}
     * @memberof OfferDto
     */
    'location'?: string;
}
/**
 * 
 * @export
 * @interface ParkingSpaceDto
 */
export interface ParkingSpaceDto {
    /**
     * pole with server use to sent and client read
     * @type {number}
     * @memberof ParkingSpaceDto
     */
    'id'?: number;
    /**
     * pole with client and server use to sent and read only in specific endpoits
     * @type {number}
     * @memberof ParkingSpaceDto
     */
    'owner_id'?: number;
    /**
     * pole with client and server use to sent and read parkingSpace
     * @type {string}
     * @memberof ParkingSpaceDto
     */
    'location'?: string;
}
/**
 * 
 * @export
 * @interface SignInDto
 */
export interface SignInDto {
    /**
     * 
     * @type {string}
     * @memberof SignInDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof SignInDto
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface SignUpDto
 */
export interface SignUpDto {
    /**
     * 
     * @type {string}
     * @memberof SignUpDto
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof SignUpDto
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof SignUpDto
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface StatusDto
 */
export interface StatusDto {
    /**
     * Short status info
     * @type {string}
     * @memberof StatusDto
     */
    'status'?: string;
    /**
     * Status code
     * @type {number}
     * @memberof StatusDto
     */
    'code'?: number;
    /**
     * Verbose message
     * @type {string}
     * @memberof StatusDto
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {number}
     * @memberof UserDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'password'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserDto
     */
    'admin'?: boolean;
}
/**
 * 
 * @export
 * @interface UserPageDto
 */
export interface UserPageDto {
    /**
     * 
     * @type {Array<UserDto>}
     * @memberof UserPageDto
     */
    'items'?: Array<UserDto>;
}

/**
 * AuthControllerApi - axios parameter creator
 * @export
 */
export const AuthControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Sign in
         * @param {SignInDto} signInDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signIn: async (signInDto: SignInDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signInDto' is not null or undefined
            assertParamExists('signIn', 'signInDto', signInDto)
            const localVarPath = `/users/signin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signInDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sign up
         * @param {SignUpDto} signUpDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUp: async (signUpDto: SignUpDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signUpDto' is not null or undefined
            assertParamExists('signUp', 'signUpDto', signUpDto)
            const localVarPath = `/users/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signUpDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthControllerApi - functional programming interface
 * @export
 */
export const AuthControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Sign in
         * @param {SignInDto} signInDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signIn(signInDto: SignInDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signIn(signInDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sign up
         * @param {SignUpDto} signUpDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signUp(signUpDto: SignUpDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signUp(signUpDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthControllerApi - factory interface
 * @export
 */
export const AuthControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Sign in
         * @param {SignInDto} signInDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signIn(signInDto: SignInDto, options?: any): AxiosPromise<AuthDto> {
            return localVarFp.signIn(signInDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sign up
         * @param {SignUpDto} signUpDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUp(signUpDto: SignUpDto, options?: any): AxiosPromise<AuthDto> {
            return localVarFp.signUp(signUpDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthControllerApi - object-oriented interface
 * @export
 * @class AuthControllerApi
 * @extends {BaseAPI}
 */
export class AuthControllerApi extends BaseAPI {
    /**
     * 
     * @summary Sign in
     * @param {SignInDto} signInDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public signIn(signInDto: SignInDto, options?: AxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).signIn(signInDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sign up
     * @param {SignUpDto} signUpDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public signUp(signUpDto: SignUpDto, options?: AxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).signUp(signUpDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OfferControllerApi - axios parameter creator
 * @export
 */
export const OfferControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new offer
         * @param {OfferDto} offerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOffer: async (offerDto: OfferDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'offerDto' is not null or undefined
            assertParamExists('createOffer', 'offerDto', offerDto)
            const localVarPath = `/offer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT Bearer Auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(offerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete myOffer
         * @param {number} offerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMyOffer: async (offerId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'offerId' is not null or undefined
            assertParamExists('deleteMyOffer', 'offerId', offerId)
            const localVarPath = `/user/offer/{offer_id}`
                .replace(`{${"offer_id"}}`, encodeURIComponent(String(offerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT Bearer Auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete offer (for admin use)
         * @param {number} offerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOffer: async (offerId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'offerId' is not null or undefined
            assertParamExists('deleteOffer', 'offerId', offerId)
            const localVarPath = `/offer/{offer_id}`
                .replace(`{${"offer_id"}}`, encodeURIComponent(String(offerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT Bearer Auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get page_dto of my offerts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyOffers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/offers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT Bearer Auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get offer by id
         * @param {number} offerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOfferById: async (offerId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'offerId' is not null or undefined
            assertParamExists('getOfferById', 'offerId', offerId)
            const localVarPath = `/offers/{offer_id}`
                .replace(`{${"offer_id"}}`, encodeURIComponent(String(offerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get page_dto of all offers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/offers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OfferControllerApi - functional programming interface
 * @export
 */
export const OfferControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OfferControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new offer
         * @param {OfferDto} offerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOffer(offerDto: OfferDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfferDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOffer(offerDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete myOffer
         * @param {number} offerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMyOffer(offerId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMyOffer(offerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete offer (for admin use)
         * @param {number} offerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOffer(offerId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOffer(offerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get page_dto of my offerts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyOffers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfferDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyOffers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get offer by id
         * @param {number} offerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOfferById(offerId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfferDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOfferById(offerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get page_dto of all offers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOffers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfferDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOffers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OfferControllerApi - factory interface
 * @export
 */
export const OfferControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OfferControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new offer
         * @param {OfferDto} offerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOffer(offerDto: OfferDto, options?: any): AxiosPromise<OfferDto> {
            return localVarFp.createOffer(offerDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete myOffer
         * @param {number} offerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMyOffer(offerId: number, options?: any): AxiosPromise<StatusDto> {
            return localVarFp.deleteMyOffer(offerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete offer (for admin use)
         * @param {number} offerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOffer(offerId: number, options?: any): AxiosPromise<StatusDto> {
            return localVarFp.deleteOffer(offerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get page_dto of my offerts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyOffers(options?: any): AxiosPromise<OfferDto> {
            return localVarFp.getMyOffers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get offer by id
         * @param {number} offerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOfferById(offerId: number, options?: any): AxiosPromise<OfferDto> {
            return localVarFp.getOfferById(offerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get page_dto of all offers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffers(options?: any): AxiosPromise<OfferDto> {
            return localVarFp.getOffers(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OfferControllerApi - object-oriented interface
 * @export
 * @class OfferControllerApi
 * @extends {BaseAPI}
 */
export class OfferControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create a new offer
     * @param {OfferDto} offerDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferControllerApi
     */
    public createOffer(offerDto: OfferDto, options?: AxiosRequestConfig) {
        return OfferControllerApiFp(this.configuration).createOffer(offerDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete myOffer
     * @param {number} offerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferControllerApi
     */
    public deleteMyOffer(offerId: number, options?: AxiosRequestConfig) {
        return OfferControllerApiFp(this.configuration).deleteMyOffer(offerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete offer (for admin use)
     * @param {number} offerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferControllerApi
     */
    public deleteOffer(offerId: number, options?: AxiosRequestConfig) {
        return OfferControllerApiFp(this.configuration).deleteOffer(offerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get page_dto of my offerts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferControllerApi
     */
    public getMyOffers(options?: AxiosRequestConfig) {
        return OfferControllerApiFp(this.configuration).getMyOffers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get offer by id
     * @param {number} offerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferControllerApi
     */
    public getOfferById(offerId: number, options?: AxiosRequestConfig) {
        return OfferControllerApiFp(this.configuration).getOfferById(offerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get page_dto of all offers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferControllerApi
     */
    public getOffers(options?: AxiosRequestConfig) {
        return OfferControllerApiFp(this.configuration).getOffers(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ParkingSpaceControllerApi - axios parameter creator
 * @export
 */
export const ParkingSpaceControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new parkingSpace (for admin use)
         * @param {ParkingSpaceDto} parkingSpaceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createParkingSpace: async (parkingSpaceDto: ParkingSpaceDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'parkingSpaceDto' is not null or undefined
            assertParamExists('createParkingSpace', 'parkingSpaceDto', parkingSpaceDto)
            const localVarPath = `/parkingSpace`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT Bearer Auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(parkingSpaceDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete parkingSpace (for admin use)
         * @param {number} parkingSpaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteParkingSpace: async (parkingSpaceId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'parkingSpaceId' is not null or undefined
            assertParamExists('deleteParkingSpace', 'parkingSpaceId', parkingSpaceId)
            const localVarPath = `/parkingSpace/{parkingSpace_id}`
                .replace(`{${"parkingSpace_id"}}`, encodeURIComponent(String(parkingSpaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT Bearer Auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get page_dto of my offerts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyParkingSpace: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/parkingSpace`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT Bearer Auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get page_dto of all parkingSpace (for admin use)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParkingSpace: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/parkingSpace`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT Bearer Auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get parkingSpace by id (for admin use)
         * @param {number} parkingSpaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParkingSpaceById: async (parkingSpaceId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'parkingSpaceId' is not null or undefined
            assertParamExists('getParkingSpaceById', 'parkingSpaceId', parkingSpaceId)
            const localVarPath = `/parkingSpace/{parkingSpace_id}`
                .replace(`{${"parkingSpace_id"}}`, encodeURIComponent(String(parkingSpaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT Bearer Auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ParkingSpaceControllerApi - functional programming interface
 * @export
 */
export const ParkingSpaceControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ParkingSpaceControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new parkingSpace (for admin use)
         * @param {ParkingSpaceDto} parkingSpaceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createParkingSpace(parkingSpaceDto: ParkingSpaceDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParkingSpaceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createParkingSpace(parkingSpaceDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete parkingSpace (for admin use)
         * @param {number} parkingSpaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteParkingSpace(parkingSpaceId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteParkingSpace(parkingSpaceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get page_dto of my offerts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyParkingSpace(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParkingSpaceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyParkingSpace(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get page_dto of all parkingSpace (for admin use)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getParkingSpace(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParkingSpaceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getParkingSpace(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get parkingSpace by id (for admin use)
         * @param {number} parkingSpaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getParkingSpaceById(parkingSpaceId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParkingSpaceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getParkingSpaceById(parkingSpaceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ParkingSpaceControllerApi - factory interface
 * @export
 */
export const ParkingSpaceControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ParkingSpaceControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new parkingSpace (for admin use)
         * @param {ParkingSpaceDto} parkingSpaceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createParkingSpace(parkingSpaceDto: ParkingSpaceDto, options?: any): AxiosPromise<ParkingSpaceDto> {
            return localVarFp.createParkingSpace(parkingSpaceDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete parkingSpace (for admin use)
         * @param {number} parkingSpaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteParkingSpace(parkingSpaceId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteParkingSpace(parkingSpaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get page_dto of my offerts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyParkingSpace(options?: any): AxiosPromise<ParkingSpaceDto> {
            return localVarFp.getMyParkingSpace(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get page_dto of all parkingSpace (for admin use)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParkingSpace(options?: any): AxiosPromise<ParkingSpaceDto> {
            return localVarFp.getParkingSpace(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get parkingSpace by id (for admin use)
         * @param {number} parkingSpaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParkingSpaceById(parkingSpaceId: number, options?: any): AxiosPromise<ParkingSpaceDto> {
            return localVarFp.getParkingSpaceById(parkingSpaceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ParkingSpaceControllerApi - object-oriented interface
 * @export
 * @class ParkingSpaceControllerApi
 * @extends {BaseAPI}
 */
export class ParkingSpaceControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create a new parkingSpace (for admin use)
     * @param {ParkingSpaceDto} parkingSpaceDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParkingSpaceControllerApi
     */
    public createParkingSpace(parkingSpaceDto: ParkingSpaceDto, options?: AxiosRequestConfig) {
        return ParkingSpaceControllerApiFp(this.configuration).createParkingSpace(parkingSpaceDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete parkingSpace (for admin use)
     * @param {number} parkingSpaceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParkingSpaceControllerApi
     */
    public deleteParkingSpace(parkingSpaceId: number, options?: AxiosRequestConfig) {
        return ParkingSpaceControllerApiFp(this.configuration).deleteParkingSpace(parkingSpaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get page_dto of my offerts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParkingSpaceControllerApi
     */
    public getMyParkingSpace(options?: AxiosRequestConfig) {
        return ParkingSpaceControllerApiFp(this.configuration).getMyParkingSpace(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get page_dto of all parkingSpace (for admin use)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParkingSpaceControllerApi
     */
    public getParkingSpace(options?: AxiosRequestConfig) {
        return ParkingSpaceControllerApiFp(this.configuration).getParkingSpace(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get parkingSpace by id (for admin use)
     * @param {number} parkingSpaceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParkingSpaceControllerApi
     */
    public getParkingSpaceById(parkingSpaceId: number, options?: AxiosRequestConfig) {
        return ParkingSpaceControllerApiFp(this.configuration).getParkingSpaceById(parkingSpaceId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserControllerApi - axios parameter creator
 * @export
 */
export const UserControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a user (for admin use)
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (userDto: UserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userDto' is not null or undefined
            assertParamExists('createUser', 'userDto', userDto)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT Bearer Auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete User (for admin use)
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUser', 'userId', userId)
            const localVarPath = `/users/{user_id}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT Bearer Auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user by id (for admin use)
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserById', 'userId', userId)
            const localVarPath = `/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT Bearer Auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get users (for admin use)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT Bearer Auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserControllerApi - functional programming interface
 * @export
 */
export const UserControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a user (for admin use)
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(userDto: UserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(userDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete User (for admin use)
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get user by id (for admin use)
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserById(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserById(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get users (for admin use)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPageDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserControllerApi - factory interface
 * @export
 */
export const UserControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a user (for admin use)
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(userDto: UserDto, options?: any): AxiosPromise<UserDto> {
            return localVarFp.createUser(userDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete User (for admin use)
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(userId: number, options?: any): AxiosPromise<StatusDto> {
            return localVarFp.deleteUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user by id (for admin use)
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById(userId: number, options?: any): AxiosPromise<UserDto> {
            return localVarFp.getUserById(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get users (for admin use)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(options?: any): AxiosPromise<UserPageDto> {
            return localVarFp.getUsers(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserControllerApi - object-oriented interface
 * @export
 * @class UserControllerApi
 * @extends {BaseAPI}
 */
export class UserControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create a user (for admin use)
     * @param {UserDto} userDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public createUser(userDto: UserDto, options?: AxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).createUser(userDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete User (for admin use)
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public deleteUser(userId: number, options?: AxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).deleteUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user by id (for admin use)
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getUserById(userId: number, options?: AxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).getUserById(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get users (for admin use)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getUsers(options?: AxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).getUsers(options).then((request) => request(this.axios, this.basePath));
    }
}


